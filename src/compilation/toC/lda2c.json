{
    "rules": [
        {  "name":"egalité",
            "pattern": "=",
            "replace": "=="
        },
        {  "name":"Et",
            "pattern": "et",
            "replace": "&&"
        },
        {  "name":"Ou",
            "pattern": "\\s+ou\\s+",
            "replace": "||"
        },
        {  "name":"MOD",
            "pattern": "\\b(MOD|mod)\\b",
            "replace": "%"
        },
        {  "name":"DIV",
            "pattern": "\\b(DIV|div)\\b",
            "replace": "/"
        },
        {  "name":"entier",
            "pattern": "entier(\\s*)",
            "replace": "int$1"
        },
        {  "name":"caractère",
            "pattern": "caractère(\\s*)",
            "replace": "char$1"
        },
        {  "name":"boolean",
            "pattern": "booléen(\\s*)",
            "replace": "bool$1 //ajoutez typedef enum { false, true } bool; en debut de fichier"
        },
         {  "name":"affectation",
            "pattern": "(.*)<-(.*)",
            "replace": "$1=$2;"
        },
         {  "name":"booléen vrai",
            "pattern": "(=\\s*)vrai",
            "replace": "$1=true;"
        },
         {  "name":"booléen faux",
            "pattern": "(=\\s*)faux",
            "replace": "$1=false;"
        },
        {  "name":"différent",
            "pattern": "<>",
            "replace": "!="
        },
        {  "name":"declaration",
            "pattern": "(?:var|tableau)(.*):(.*)",
            "replace": "$2 $1;"
        }
        ,
        {  "name":"répéter",
            "pattern": "répéter\\s*([\\s\\S)]*?)(?:jusqu'à ce que|jusqu'à-ce-que)(.*)",
            "replace": "do{\n\t$1}while($2);"
        }
        ,
        {  "name":"pour",
            "pattern": "pour(.*)de(.*)à(.*)faire([\\s\\S)]*?)fpour",
            "replace": "for($1=$2;$1<=$3;$1++){$4}\n"
        }
        ,
        {  "name":"tant-que",
            "pattern": "(?:tant-que|tant que)(.*)faire([\\s\\S)]*?)ftant",
            "replace": "while($1){$2}\n"
        }
        ,
        {  "name":"si-fsi",
            "pattern": "si(.*)alors([\\s\\S]*?)fsi",
            "replace": "if($1){$2}"
        }
        ,
        {  "name":"sinon",
            "pattern": "([^{]*)sinon([^}]*)",
            "replace": "$1}\nelse{$2"
        }
        ,
        {  "name":"lire",
            "pattern": "lire\\W+(\\w*)",
            "replace": "scanf(\"%type\",&$1);"
        }
        ,
        {  "name":"écrire",
            "pattern": "écrire\\s*(.*)",
            "replace": "printf($1);"
        }
    ]
}